import java.util.ArrayList;
import java.util.Scanner;


public class StraightFlush {
	private static boolean hasStraightFlushes = false;
	
	public static void main(String[] args) {
		@SuppressWarnings("resource")
		Scanner scanner = new Scanner(System.in);
		String cardsLine = scanner.nextLine();
		String[] cards = cardsLine.split(", ");
		sort(cards, 0);
		System.out.println(String.join(", ", cards));
		printFlushes(cards, 0);
		
		if (!hasStraightFlushes) {
			System.out.println("No Straight Flushes");
		}
	}
	
	private static void printFlushes(String[] cards, int offset) {
		String prevCard = cards[offset];
		ArrayList<String> flush = new ArrayList<String>();
		flush.add(prevCard);
		for (int i = offset + 1; i < cards.length; i++) {
			int prevCardPts = getPoints(prevCard);
			int currentCardPts = getPoints(cards[i]);
			if (prevCardPts == currentCardPts) {
				continue;
			} else if (prevCardPts == currentCardPts - 1) {
				if (cards[i].charAt(cards[i].length() - 1) == prevCard.charAt(prevCard.length() - 1)) {
					flush.add(cards[i]);
					hasStraightFlushes = true;
				} else {
					continue;
				}
			} else {
				break;
			}
			if (flush.size() == 5) {
				break;
			}
			prevCard = cards[i];
		}
		
		if (flush.size() == 5) {
			System.out.print('[');
			System.out.print(String.join(", ", flush));
			System.out.println(']');
		}
		
		if (++offset <= cards.length - 5) {
			printFlushes(cards, offset);
		}
	}

	private static int getPoints(String card) {
		switch (card.charAt(0)) {
			case 'A': return 14;
			case 'K': return 13;
			case 'Q': return 12;
			case 'J': return 11;
			default: return Integer.parseInt(card.substring(0, card.length() - 1));
		}
	}
	
	private static void sort(String[] cards, int offset) {
		
		for (int i = offset + 1; i < cards.length; i++) {
			if (getPoints(cards[i]) < getPoints(cards[offset])) {
				String swap = cards[i];
				cards[i] = cards[offset];
				cards[offset] = swap;
			}
		}
		
		if (++offset < cards.length - 1) {
			sort(cards, offset);
		}
	}
}
