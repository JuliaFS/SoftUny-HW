import java.awt.geom.Point2D;
import java.awt.geom.Point2D.Float;
import java.util.Locale;
import java.util.Scanner;

/*
 * Write a program to check whether a point is
 * inside or outside the house below.
 * The point is given as a pair of floating-point numbers, 
 * separated by a space. Your program should print "Inside" or "Outside".
 */
public class Problem_09_PointsInsideHouse {
	private static Float[] roofPoints = {
		new Point2D.Float( 12.5F, 8.5F ),
		new Point2D.Float( 17.5F, 3.5F ),
		new Point2D.Float( 22.5F, 8.5F )
	};
	
	private static Float[] bodySquaresPoints = {
		new Point2D.Float( 12.5F, 8.5F ),
		new Point2D.Float( 17.5F, 8.5F ),
		new Point2D.Float( 17.0F, 13.5F ),
		new Point2D.Float( 12.5F, 13.5F ),
		
		new Point2D.Float( 20.0F, 8.5F ),
		new Point2D.Float( 22.5F, 8.5F ),
		new Point2D.Float( 22.5F, 13.5F ),
		new Point2D.Float( 20.0F, 13.5F ),
	};
	
	public static void main(String[] args) {
		Locale.setDefault( Locale.ROOT );
		
		@SuppressWarnings("resource")
		Scanner scanner = new Scanner( System.in );
		float xPos = scanner.nextFloat();
		float yPos = scanner.nextFloat();
		Float inputPoint = new Point2D.Float( xPos, yPos );
		
		String msg = isInside( inputPoint ) ? "Inside" : "Outside";
		System.out.println( msg );
	}
	public static boolean isInsideHouse( Float inputPoint ) {
		boolean isInside = false;
		
		for ( int i = 0, next = 1; i < housePoints.length - 1; i++, next++) {
			if ( next >= housePoints.length - 1 ) {
				next = 0;
			}
			if ( !isRightOrColinear( housePoints[ i ], housePoints[ next ],
					inputPoint )) {
				isInside = false;
				break;
			}
		}
		return isInside;
	}
	
	public boolean isInsideFigure( Float inputPoint, Float[] figurePoints ) {
		boolean isInsideFigure = true;
		
		for ( int i = 0, next = 1; i < figurePoints.length - 1; i++, next++) {
			if ( next >= figurePoints.length - 1 ) {
				next = 0;
			}
			if ( !isRightOrColinear( figurePoints[ i ], figurePoints[ next ],
					inputPoint )) {
				isInsideFigure = false;
				break;
			}
		}
		
		return isInsideFigure;
	}
	
	public static boolean isRightOrColinear( Point2D.Float a,
			Point2D.Float b, Point2D.Float c ) {
		return ( ( b.x - a.x ) * ( c.y - a.y ) -
				( b.y - a.y ) * ( c.x - a.x ) ) >= 0;
	}
}
