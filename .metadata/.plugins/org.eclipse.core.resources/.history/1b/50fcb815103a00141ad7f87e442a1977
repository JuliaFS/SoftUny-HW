import java.io.File;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;



 /* Write a program to visualize the house and the points from
 * the image above as SVG graphic embedded into a HTML document.
 * The SVG format (Scalable Vector Graphics) is a
 * XML based format for describing vector graphics used in
 * the modern Web applications that supports drawing lines,
 * circles, ellipses, rectangles, paths and
 * other objects like text and raster images.
 * You may find in Internet some Java library to
 * build SVG graphics or you may build it through an
 * XML parser or by printing plain text.
 * You are free to choose the libraries and tools.
 *  * The coordinate axes should be thin dotted lines.
 *  * The coordinates should have numbers as above.
 *  * The house should consist of two rectangles and
 *      a triangle above them, with solid lines and 
 *      filled in semi-transparent gray color.
 *  * The points inside the house should be
 *  	painted as black circles.
 *  * The points outside the house should be painted as
 *  	gray circles with thin black border.
 * You are not allowed to use ready SVG, use Java code to draw everything!
 * Take as input the coordinates of the points
 * (the first line holds the number of points n and
 * the next n lines hold a point coordinates separated by a space).
 * Produce as output a file names house.html,
 * which visualizes the house and the points inside and
 * outside of it through an embedded SVG graphic
 */
public class Problem_10_PaintAHouseAsSVG {

	public static void main(String[] args) {
		try
		{
		  DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		  DocumentBuilder docBuilder = docFactory.newDocumentBuilder();

		  //root elements
		  Document doc = docBuilder.newDocument();

		  Element rootElement = doc.createElement("company");
		  doc.appendChild(rootElement);

		  //staff elements
		  Element staff = doc.createElement("Staff");
		  rootElement.appendChild(staff);

		  //set attribute to staff element
		  Attr attr = doc.createAttribute("id");
		  attr.setValue("1");
		  staff.setAttributeNode(attr);

		  //shorten way
		  //staff.setAttribute("id", "1");

		  //firstname elements
		  Element firstname = doc.createElement("firstname");
		  firstname.appendChild(doc.createTextNode("yong"));
		  staff.appendChild(firstname);

		  //lastname elements
		  Element lastname = doc.createElement("lastname");
		  lastname.appendChild(doc.createTextNode("mook kim"));
		  staff.appendChild(lastname);

		  //nickname elements
		  Element nickname = doc.createElement("nickname");
		  nickname.appendChild(doc.createTextNode("mkyong"));
		  staff.appendChild(nickname);

		  //salary elements
		  Element salary = doc.createElement("salary");
		  salary.appendChild(doc.createTextNode("100000"));
		  staff.appendChild(salary);

		  //write the content into xml file
		  TransformerFactory transformerFactory = TransformerFactory.newInstance();
		  Transformer transformer = transformerFactory.newTransformer();
		  DOMSource source = new DOMSource(doc);

		  StreamResult result =  new StreamResult(new File("/home/alex/testing.xml"));
		  transformer.transform(source, result);

		  System.out.println("Done");

		}catch(ParserConfigurationException pce){
		  pce.printStackTrace();
		}catch(TransformerException tfe){
		  tfe.printStackTrace();
		}
	}
	
}
