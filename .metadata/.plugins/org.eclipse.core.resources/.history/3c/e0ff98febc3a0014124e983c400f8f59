

import java.io.StringWriter;
import java.io.Writer;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Comment;
import org.w3c.dom.Document;
import org.w3c.dom.Element;





/* Problem 10
 * Write a program to visualize the house and the points from
 * the image above as SVG graphic embedded into a HTML document.
 * The SVG format (Scalable Vector Graphics) is a
 * XML based format for describing vector graphics used in
 * the modern Web applications that supports drawing lines,
 * circles, ellipses, rectangles, paths and
 * other objects like text and raster images.
 * You may find in Internet some Java library to
 * build SVG graphics or you may build it through an
 * XML parser or by printing plain text.
 * You are free to choose the libraries and tools.
 *  * The coordinate axes should be thin dotted lines.
 *  * The coordinates should have numbers as above.
 *  * The house should consist of two rectangles and
 *      a triangle above them, with solid lines and 
 *      filled in semi-transparent gray color.
 *  * The points inside the house should be
 *  	painted as black circles.
 *  * The points outside the house should be painted as
 *  	gray circles with thin black border.
 * You are not allowed to use ready SVG, use Java code to draw everything!
 * Take as input the coordinates of the points
 * (the first line holds the number of points n and
 * the next n lines hold a point coordinates separated by a space).
 * Produce as output a file names house.html,
 * which visualizes the house and the points inside and
 * outside of it through an embedded SVG graphic
 */
public class Problem_10_PaintAHouseAsSVG {

	private static float startX = 10F;
	private float endY = 16F;
	private static float interval = 2.5F;
	private static int cell_spacing = 4;
	
	public static void main(String[] args) throws Exception {
		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = dbf.newDocumentBuilder();
		Document doc = builder.newDocument();
			         
		// create the root element node
		Element element = doc.createElement("svg");
	    doc.appendChild(element);
	 
		appendCoordinates(element, doc);
		 
		// add an attribute to the node
		//itemElement.setAttribute("myattr", "attrvalue");
		 
		// create text for the node
		//itemElement.insertBefore(doc.createTextNode("text"), itemElement.getLastChild());
		 
		prettyPrint(doc);
		
	}
	
	private static void appendCoordinates(Element rootElement, Document doc) {
		int width = 6;
		for (int i = 0; i < width; i++) {
			Element textElement = doc.createElement("text");
			float currentX = startX + interval * i;
			textElement.setAttribute("x", Float.toString(currentX));
			textElement.setAttribute("y", "40");
			textElement.insertBefore(doc.createTextNode(Float.toString(currentX * cell_spacing)), textElement.getLastChild());
			rootElement.appendChild(textElement);
		}
	}
	
	public static final void prettyPrint(Document xml) throws Exception {
        Transformer tf = TransformerFactory.newInstance().newTransformer();
        tf.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
        tf.setOutputProperty(OutputKeys.INDENT, "yes");
        Writer out = new StringWriter();
        tf.transform(new DOMSource(xml), new StreamResult(out));
        System.out.println(out.toString());
    }
}
